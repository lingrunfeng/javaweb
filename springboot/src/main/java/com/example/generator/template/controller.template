package com.example.controller;

import com.example.common.Result;
import com.example.entity.{entityName};
import com.example.mapper.{entityName}Mapper;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.metadata.IPage;
import org.springframework.web.bind.annotation.*;
import cn.hutool.core.util.StrUtil;

import javax.annotation.Resource;
import java.util.*;
import java.math.BigDecimal;

@RestController
@RequestMapping("/{lowerName}")
public class {entityName}Controller {

    @Resource
    private {entityName}Mapper {lowerName}Mapper;

    @PostMapping
    public Result<?> save(@RequestBody {entityName} {lowerName}) {
        {lowerName}Mapper.insert({lowerName});
        return Result.success();
    }

    @PutMapping
    public Result<?> update(@RequestBody {entityName} {lowerName}) {
        {lowerName}Mapper.updateById({lowerName});
        return Result.success();
    }

    @DeleteMapping("/{id}")
    public Result<?> delete(@PathVariable Long id) {
        {lowerName}Mapper.deleteById(id);
        return Result.success();
    }

    @GetMapping("/{id}")
    public Result<?> findById(@PathVariable Long id) {
        return Result.success({lowerName}Mapper.selectById(id));
    }

    @GetMapping
    public Result<?> findAll() {
        List<{entityName}> list = {lowerName}Mapper.selectList(null);
        return Result.success(list);
    }

    @GetMapping("/page")
    public Result<?> findPage(@RequestParam(required = false, defaultValue = "") String name,
                              @RequestParam(required = false, defaultValue = "1") Integer pageNum,
                              @RequestParam(required = false, defaultValue = "10") Integer pageSize) {
        LambdaQueryWrapper<{entityName}> query = Wrappers.<{entityName}>lambdaQuery().orderByDesc({entityName}::getId);
        if (StrUtil.isNotBlank(name)) {
            query.like({entityName}::getName, name);
        }
        IPage<{entityName}> page = {lowerName}Mapper.selectPage(new Page<>(pageNum, pageSize), query);
        return Result.success(page);
    }


}
